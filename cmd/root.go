package cmd

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
	"github.com/spf13/viper"
)

var (
	cfgFile string
	rootCmd = &cobra.Command{
		Use:   "ephemyral",
		Short: "Ephemyral is an AI-powered CLI application for managing tasks that leverage machine learning models.",
		Long:  `Ephemyral is an AI-powered CLI application designed to streamline and optimize various tasks associated with machine learning projects. By leveraging machine learning models, Ephemyral provides a set of robust commands that simplify building, testing, and managing ML workflows. This tool is tailored for software engineers, data scientists, and anyone managing AI-driven projects.`,
	}
)

func Execute() {
	cobra.CheckErr(rootCmd.Execute())
}

func init() {
	cobra.OnInitialize(initConfig)
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.ephemyral.yaml)")
}

func initConfig() {
	viper.SetConfigType("yaml")
	if cfgFile != "" {
		viper.SetConfigFile(cfgFile)
	} else {
		setDefaultConfig()
	}

	viper.AutomaticEnv()
	readConfig()
}

func setDefaultConfig() {
	home, err := os.UserHomeDir()
	cobra.CheckErr(err)

	viper.AddConfigPath(home)
	viper.SetConfigName(".ephemyral")
}

func readConfig() {
	if err := viper.ReadInConfig(); err == nil {
		fmt.Fprintln(os.Stderr, "Using config file:", viper.ConfigFileUsed())
	}
}

func GenerateAndMergeDocs() {
	// Generate individual markdown files
	err := doc.GenMarkdownTree(rootCmd, "./docs")
	if err != nil {
		log.Fatal(err)
	}

	// Clean and rewrite links for each document, then concatenate them
	var documentation strings.Builder
	files, _ := ioutil.ReadDir("./docs")

	for _, file := range files {
		if !file.IsDir() {
			// Clean and rewrite the content of each document
			cleanContent := cleanDocumentAndRewriteLinks("./docs/" + file.Name())

			documentation.WriteString(cleanContent + "\n")
		}
	}

	documentation.String()

	// Write the new README to the file system, replacing the existing one
	err = ioutil.WriteFile("README.md", []byte(documentation.String()), 0644)
	if err != nil {
		log.Fatal(err)
	}
}

func cleanDocumentAndRewriteLinks(filePath string) string {
	// Open the file for reading
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var content strings.Builder
	scanner := bufio.NewScanner(file)

	// Regex to identify lines containing the "Auto generated" text
	autoGenRegex := regexp.MustCompile(`^###### Auto generated by spf13/cobra`)

	// Regex to match Markdown-style links
	linkRegex := regexp.MustCompile(`\[(.*?)\]\((.*?)\)`)

	for scanner.Scan() {
		line := scanner.Text()

		// Skip lines containing the "Auto generated" text
		if autoGenRegex.MatchString(line) {
			continue
		}

		// Rewrite links pointing to .md files
		line = linkRegex.ReplaceAllStringFunc(line, func(match string) string {
			parts := linkRegex.FindStringSubmatch(match)

			if len(parts) >= 3 {
				text, link := parts[1], parts[2]

				if strings.HasSuffix(link, ".md") {
					link = "./docs/" + link
				}

				return "[" + text + "](" + link + ")"
			}

			return match
		})

		content.WriteString(line + "\n")
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	return content.String()
}
